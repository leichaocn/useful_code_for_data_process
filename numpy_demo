# -*- coding: utf-8 -*-
# !/usr/bin/env python
# File : numpy_demo.py
# Date : 2019/8/31
# Author: leichao
# Email : leichaocn@163.com

"""简述功能.

详细描述.
"""

__filename__ = "numpy_demo.py"
__date__ = 2019 / 8 / 31
__author__ = "leichao"
__email__ = "leichaocn@163.com"

import os
import sys

import numpy as np

import inspect
import re


def varname(p):
    for line in inspect.getframeinfo(inspect.currentframe().f_back)[3]:
        m = re.search(r'\bvarname\s*\(\s*([A-Za-z_][A-Za-z0-9_]*)\s*\)', line)
        if m:
            return m.group(1)


def array_info(a):
    print("\n")
    print("#"*20,"array ",varname(a),"#"*20)
    print(a)
    print("shape = ", a.shape)
    # 轴的个数
    print("ndim = ", a.ndim)
    # 元素类型的名字
    print("dtype.name = ", a.dtype.name)
    # 元素的字节数。如果元素是float64,64/8=8,因此就是8个字节
    print("itemsize = ", a.itemsize)
    print("size = ", a.size)
    print("type = ", type(a))

def basic_demo():
    # 15个元素reshape成3行5列
    a = np.arange(15).reshape(3, 5)
    array_info(a)
    
    ### 创建数组
    # 直接填值
    a = np.array([2, 3, 4])
    b = np.array([[1.5, 2, 3], [4, 5, 6]])
    array_info(a)
    array_info(b)
    
    # 按形状创建
    c = np.zeros((3, 4))
    d = np.ones((2, 3, 4))
    # empty是任意数字
    e = np.empty((3,4))
    e2=np.random.random((3,4))
    array_info(c)
    array_info(d)
    array_info(e)
    array_info(e2)
    exit()
    
    # 按等差数列创建
    f=np.arange(10,30,5)
    g=np.arange(0,2,0.3)
    # linnspace的好处是，可以指定元素个数，这里是9
    h=np.linspace(0,2,9)
    i=np.arange(2)
    j=np.linspace(2,5)
    array_info(f)
    array_info(g)
    array_info(h)
    array_info(i)
    array_info(j)

def basic_compute():
    # 数组既可以对应元素相减，也可以减去一个标量。
    a=np.array([1,2,3,4])
    b=np.arange(4)
    c=a-b
    print("c = ",c)
    d=a-2
    print("d = ",d)
    # 对矩阵的直接操作，就是对元素的操作
    e=a**2
    print("e = ",e)
    # 数组的布尔表达式 就是一个同尺寸的布尔数组
    print("d>0 = ",d>0)
    
    
    # 两个向量的点积、内积。
    f1=np.dot(a,b)
    print("f1 = ",f1)
    f2=a.dot(b)
    print("f2 = ",f2)
    
    
    """
    c=[1,1,1,1]   a=[1,2,3,4]
    g1 =  [[1 2 3 4]
     [1 2 3 4]
     [1 2 3 4]
     [1 2 3 4]]
    """
    g1=np.outer(c,a)
    print("g1 = ",g1)
    
    """
    a=[1,2,3,4]   c=[1,1,1,1]
    g2 =  [[1 1 1 1]
     [2 2 2 2]
     [3 3 3 3]
     [4 4 4 4]]
    """
    g2=np.outer(a,c)
    print("g2 = ",g2)
    
    # 数组对应元素相乘
    g=np.array([1,2,3,4])*np.array([1,2,3,4])
    print("g = ",g)
    # A 是3*2，B是2*4，C是3*4
    A=np.array([[1,1],[2,2],[3,3]])
    B=np.array([[1,2,3,4],[1,2,3,4]])
    C=A.dot(B)
    print("C = ",C)
    
    # axis=0,处理 列
    # axis=1,处理 行
    print("C.sum() = ",C.sum())
    print("C.max() = ",C.max())
    print("C.max(axis=1) = ",C.max(axis=1))
    print("C.min() = ",C.min())
    print("C.sum(axis=0) = ",C.sum(axis=0))
    print("C.sum(axis=1) = ",C.sum(axis=1))

    print("C.cumsum(axis=0) = ",C.cumsum(axis=0))
    print("C.cumsum(axis=1) = ",C.cumsum(axis=1))
    print("C.cumsum() = ",C.cumsum())
    
def index_and_slide():
    a=np.arange(10)**2
    print("a = ",a)
    # [2:5],包含a[2],不包含a[5]
    print("a[2:5] = ",a[2:5])
    print("a[2:5] = ",a[2:5])
    # 把a[:6]里，每隔一个元素，赋值为-100，不包含a[6]
    a[:6:2] = -100
    print("a = ",a)
    # 逆序输出
    print("a[::-1] = ",a[::-1])
    
    b=np.array([[1,2,3],[10,20,30]])
    print("b[1,2] = ",b[1,2])
    # 每行第3个元素。
    print("b[:,2] = ",b[:,2])
    print("b[:2,2] = ",b[:2,2])
    print("b[...,2] = ",b[...,2])   # ... 表示不管有多少维度，例如：，：
    
    # 用矩阵来索引矩阵
    a = np.arange(10)**2
    print("a = ",a)
    i = np.array([1,1,3,8,5])
    # a[1],a[1],a[3],a[8],a[5]
    print("a[i] = ",a[i])
    j=np.array([[2,3,4],[5,3,5]])
    # 相当于按照j的尺寸，找出所有的 a[j的元素]
    print("a[j] = ",a[j])
    
    a=np.array([[0,1,2,3],[10,11,12,13],[20,21,22,23]])
    print("a = ",a)
    i=np.array([[0,1],[2,2]])
    j=np.array([[1,0],[2,3]])
    print("a[i,j] = ",a[i,j])   # i j 分别对应行列索引
    print("a[i,2] = ",a[i,2])   # 只输出对应i行索引的所有第2列元素
    print("a[:,j] = ",a[:,j])    # :表示遍历，将会有a的行数个 a[0,j],a[1,j],a[2,j]
    print("a[:,j].shape = ",a[:,j].shape) # a中的每一行，都输出
    row=np.array([False,False,True])
    col=np.array([True,True,False,True])
    print("a[row] = ",a[row])
    print("a[row,:] = ",a[row,:])
    print("a[:,col] = ",a[:,col])
    for row in a:
        print("row = ",row)
    for element in a.flat:
        print("element = ",element)
    
    
    
    a=np.arange(12).reshape((3,4))
    print("a = ",a)
    b=a>5
    print("b = ",b)
    print("a[b] = ",a[b])   # 打印出大于5的元素
    a[b]=0        # 所有大于5的元素置为0
    print("a = ",a)
    
    
    
    
    
    
    
    
    
    

def main():
    """仅用于单元测试"""
    # basic_demo()
    # basic_compute()
    index_and_slide()
    

if __name__ == '__main__':
    main()
